# GENERATED ON {date:%Y-%m-%d %H:%M} by {configure_name} from {makefile_skel}

# --- PARAMETERS ---

# compilation directories
SOURCE_DIR := {source_dir}
DEBUG_DIR := {debug_dir}
RELEASE_DIR := {release_dir}

# output binaries names
BINARY_NAME := {binary_name}
TEST_BINARY_NAME := {test_binary_name}

# entry points
MAIN_NAME := {main_name}
TEST_MAIN_NAME := {test_main_name}

# c compiler setup
CC := gcc
CFLAGS := -std=c11 -Wall -Wextra -Wpedantic
CDEBUG_FLAGS := -g -O0 -DDEBUG -DCHECK_ERRORLEVELS_VALIDITY -DCHECK_LOGTARGET_PTR -DCHECK_CONTEXT_CHILDS -DCHECK_UNGETTOKEN
CRELEASE_FLAGS := -Werror -O3
LDFLAGS := 

# system commands 
RM := rm -rf
MKDIR := mkdir -p

# discover script
DISCOVER_SCRIPT := {configure_name}

# catalog script
CATALOG_SCRIPT := {catalog_script}

# test discovery script
TEST_DISCOVERY_SCRIPT := {test_discovery_script}
TEST_PREFIX := {test_prefix}
TEST_MAIN_SKEL := {test_main_skel}

# --- MAKE OPTIONS ---

# defaulting to debug build
ifndef BUILD
    BUILD := debug
endif

# adding debug flags
ifeq ($(BUILD), debug)
    BUILD_DIR := $(DEBUG_DIR)
    CFLAGS += $(CDEBUG_FLAGS)
else ifeq ($(BUILD), release)
    BUILD_DIR := $(RELEASE_DIR)
    CFLAGS += $(CRELEASE_FLAGS)
else
    $(error BUILD flag can only have the value "debug" or "release")
endif

# --- MAKEFILE REMAKING ---

# makefile name
MAKEFILE_NAME := $(lastword $(MAKEFILE_LIST))

# makefile skeleton name
MAKEFILE_SKEL := {makefile_skel}

# all targets depends on makefile components
.EXTRA_PREREQS := $(MAKEFILE_SKEL) $(DISCOVER_SCRIPT)

# discover script call
DISCOVER_ARGS :=  -source_dir $(SOURCE_DIR) -debug_dir $(DEBUG_DIR) -release_dir $(RELEASE_DIR) \
                  -binary_name $(BINARY_NAME) -test_binary_name $(TEST_BINARY_NAME) -main_name $(MAIN_NAME) -test_main_name $(TEST_MAIN_NAME)\
                  -catalog_script $(CATALOG_SCRIPT) -test_discovery_script $(TEST_DISCOVERY_SCRIPT) -test_prefix $(TEST_PREFIX) -test_main_skel $(TEST_MAIN_SKEL)

# --- SOURCE TREE CHANGES DETECTION ---

# md5 of the source tree at the generation of this file
CREATION_SRC_TREE_MD5 := {creation_src_tree_md5}

# checking md5
ifneq ($(CREATION_SRC_TREE_MD5), $(shell find $(SOURCE_DIR) | sort | md5sum | cut -d " " -f1))
    $(shell $(RM) $(MAKEFILE_NAME)) # at the end make will detect the missing makefile and regenerate it
endif

# --- DISCOVERED SOURCES AND OBJECTS ---

# list of sources
SOURCES := {sources}
TEST_SOURCES := {test_sources}

# lists of object files needed
OBJECTS := {objects}
MAIN_OBJ := {main_obj}

TEST_OBJECTS := {test_objects}
TEST_MAIN_OBJ := {test_main_obj}

# list of catalogs to generate
CATALOG_FILES := {catalog_files}
CATALOG_HEADERS := {catalog_header}

# binaries
BINARY := $(BUILD_DIR)/$(BINARY_NAME)
TEST_BINARY := $(BUILD_DIR)/$(TEST_BINARY_NAME)

# delete predefined rules
.SUFFIXES:

# --- PHONY TARGETS ---

.PHONY: all build test test_build catalogs clean

all: catalogs test build 

build: $(BINARY) 

test: test_build 
	$(TEST_BINARY) $(TEST_ARGS)

test_build: $(TEST_BINARY) 

catalogs: $(CATALOG_HEADERS)

clean: 
	$(RM) $(BUILD_DIR)

# --- LINKER TARGETS ---

$(BINARY): $(MAIN_OBJ) $(OBJECTS) | $(dir $(BINARY))
	$(CC) $(LDFLAGS) $(MAIN_OBJ) $(OBJECTS) -o $@

$(TEST_BINARY): $(TEST_MAIN_OBJ) $(OBJECTS) $(TEST_OBJECTS) | $(dir $(TEST_BINARY))
	$(CC) $(LDFLAGS) $(TEST_MAIN_OBJ) $(OBJECTS) $(TEST_OBJECTS) -o  $@

# --- COMPILE RULES ---

{compile_rules}

# --- COMPILE TEST RULES ---

$(TEST_MAIN_OBJ): $(BUILD_DIR)/$(TEST_MAIN_NAME) | $(dir $(TEST_MAIN_OBJ))
	$(CC) $(CFLAGS)  -c $< -o $@

{compile_test_rules}

# --- GENERATION OF TEST_MAIN --- 

$(BUILD_DIR)/$(TEST_MAIN_NAME): $(TEST_SOURCES) $(TEST_DISCOVERY_SCRIPT) $(TEST_MAIN_SKEL) | $(dir $(BUILD_DIR)/$(TEST_MAIN_NAME))
	$(TEST_DISCOVERY_SCRIPT) $(TEST_SOURCES) --test_prefix $(TEST_PREFIX) --main_skel $(TEST_MAIN_SKEL) -o $@

# --- CATALOGS GENERATION RULES ---

{catalog_rules}

# --- DIRECTORY CREATION --- 

{directory_rules}

$(BUILD_DIR)/:
	$(MKDIR) $@

# --- MAKEFILE REGENERATION ---

$(MAKEFILE_NAME): $(SOURCE_DIR)/$(MAIN_NAME) $(SOURCES) $(TEST_SOURCES)
	$(DISCOVER_SCRIPT) $(DISCOVER_ARGS) -mskel $(MAKEFILE_SKEL) $(MAKEFILE_NAME)