# GENERATED ON {date:%Y-%m-%d %H:%M} by {configure_name} from {makefile_skel}

# --- PARAMETERS ---

# compilation directories
SOURCE_DIR := {source_dir}
DEBUG_DIR := {debug_dir}
RELEASE_DIR := {release_dir}

# output binaries names
BINARY_NAME := {binary_name}
TEST_BINARY_NAME := {test_binary_name}

# entry points
MAIN_NAME := {main_name}
TEST_MAIN_NAME := {test_main_name}

# c compiler setup
CC := gcc
CFLAGS := -std=c99 -Wall -Wextra -Wpedantic
CDEBUG_FLAGS := -O0 -DDEBUG -DCHECK_ERRORLEVELS_VALIDITY -DCHECK_LOGTARGET_PTR -DCHECK_CONTEXT_CHILDS
CRELEASE_FLAGS := -Werror -O3
LDFLAGS := 

# system commands
RM := rm -rf
MKDIR := mkdir -p

# configure script
CONFIGURE_SCRIPT := {configure_name}

# catalog script
CATALOG_SCRIPT := {catalog_script}

# test discovery script
TEST_DISCOVERY_SCRIPT := {test_discovery_script}
TEST_PREFIX := {test_prefix}

# --- MAKE OPTIONS ---

# defaulting to debug build
ifndef BUILD
    BUILD := debug
endif

# adding debug flags
ifeq ($(BUILD), debug)
    BUILD_DIR := $(DEBUG_DIR)
    CFLAGS += $(CDEBUG_FLAGS)
else ifeq ($(BUILD), release)
    BUILD_DIR := $(RELEASE_DIR)
    CFLAGS += $(CRELEASE_FLAGS)
else
    $(error BUILD flag can only have the value "debug" or "release")
endif

# --- DISCOVERED SOURCES AND OBJECTS ---

# list of sources
SOURCES := {sources}
TEST_SOURCES := {test_sources}

# lists of object files needed
OBJECTS := {objects}
MAIN_OBJ := {main_obj}

TEST_OBJECTS := {test_objects}
TEST_MAIN_OBJ := {test_main_obj}

# list of catalogs to generate
CATALOG_FILES := {catalog_files}
CATALOG_HEADERS := {catalog_header}

# binaries
BINARY := $(BUILD_DIR)/$(BINARY_NAME)
TEST_BINARY := $(BUILD_DIR)/$(TEST_BINARY_NAME)

# --- OTHER ---

# makefile name
MAKEFILE_NAME := $(abspath $(lastword $(MAKEFILE_LIST)))

# skeleton name
MAKEFILE_SKEL := {makefile_skel}

# configure script call
CONFIGURE_ARGS := -source_dir $(SOURCE_DIR) -debug_dir $(DEBUG_DIR) -release_dir $(RELEASE_DIR) \
                  -binary_name $(BINARY_NAME) -test_binary_name $(TEST_BINARY_NAME) -main_name $(MAIN_NAME) -test_main_name $(TEST_MAIN_NAME)\
                  -catalog_script $(CATALOG_SCRIPT) -test_discovery_script $(TEST_DISCOVERY_SCRIPT) -test_prefix $(TEST_PREFIX)

# delete predefined rules
.SUFFIXES:

# --- PHONY TARGETS ---

.PHONY: all build test test_build catalogs clean

all: catalogs test build $(MAKEFILE_NAME)

build: $(BINARY) $(MAKEFILE_NAME)

test: test_build $(MAKEFILE_NAME)
	$(TEST_BINARY) $(TEST_ARGS)

test_build: $(TEST_BINARY) $(MAKEFILE_NAME)

catalogs: $(CATALOG_HEADERS)

clean: $(MAKEFILE_NAME)
	$(RM) $(BUILD_DIR)

# --- LINKER TARGETS ---

$(BINARY): $(MAIN_OBJ) $(OBJECTS) $(MAKEFILE_NAME) | $(dir $(BINARY))
	$(CC) $(LDFLAGS) $(MAIN_OBJ) $(OBJECTS) $< -o $@

$(TEST_BINARY): $(TEST_MAIN_OBJ) $(OBJECTS) $(TEST_OBJECTS) $(MAKEFILE_NAME) | $(dir $(TEST_BINARY))
	$(CC) $(LDFLAGS) $(TEST_MAIN_OBJ) $(OBJECTS) $(TEST_OBJECTS) -o  $@

# --- COMPILE RULES ---

{compile_rules}

# --- COMPILE TEST RULES ---

$(TEST_MAIN_OBJ): $(BUILD_DIR)/$(TEST_MAIN_NAME) $(MAKEFILE_NAME) | $(dir $(TEST_MAIN_OBJ))
	$(CC) $(CFLAGS)  -c $< -o $@

{compile_test_rules}

# --- GENERATION OF TEST_MAIN ---

$(BUILD_DIR)/$(TEST_MAIN_NAME): $(TEST_SOURCES) $(SOURCE_DIR)/$(TEST_DISCOVERY_SCRIPT) $(MAKEFILE_NAME) | $(dir $(BUILD_DIR)/$(TEST_MAIN_NAME))
	$(SOURCE_DIR)/$(TEST_DISCOVERY_SCRIPT) $(TEST_SOURCES) -test_prefix $(TEST_PREFIX) -o $@

# --- CATALOGS GENERATION RULES ---

{catalog_rules}

# --- DIRECTORY CREATION ---

{directory_rules}

# --- MAKEFILE REGENERATION ---

$(MAKEFILE_NAME): $(CONFIGURE_SCRIPT) $(MAKEFILE_SKEL)
	$(CONFIGURE_SCRIPT) $(CONFIGURE_ARGS) -mskel $(MAKEFILE_SKEL) $(MAKEFILE_NAME)